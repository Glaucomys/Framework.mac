| *********************************************************************************************************************
| Macro to upgrade/downgrade spells/skills and other kissassist settings from
| an existing kissassist inifile which acts as a templte.
| NOTE: Only use kissassist infiles for chars of the SAME class.
| To be even more clear: YOU CANNOT USE A INI FROM A MAGICIAN WHEN CREATING ONE FOR A WIZARD.
|
| Usage: /mac kissini kissassist_(server)_oldchar.ini
| Expected output: kissassist_(server)_newchar.ini
| 
| Version 1.0 by EqMule 07 Jun 2016 Initial Release with downgrade support
| Version 1.1 by EqMule 08 Jun 2016 - Added upgrade support you can go from lower level char kissassist.ini to higher level
|
| ***********************************************************************
| Instructions:
| You can take a kissassist.ini and this will create a new one for
| another toon of the same class and backport (or forwardport i think)
| all spells aa combatabilities and settings to the new char its being run on.
|
| Example: Run the macro on a baby level 85 sk named Shadowmule on drinal.
| We use a kissassist ini from another sk (lets say he is on tunare)
| /mac kissini kissassist_tunare_eqmule.ini
| kissassist_tunare_eqmule.ini has spells and stuff for a 105 sk named eqmule
| 
| You can expect output: kissassist_drinal_Shadowmule.ini
| It will contain ALL the correct spells and stuff for Shadowmules level.
| NOTE: Your baby char must have all his latest spells or tomes and stuff
| cause there is no guessing going on, it looks at what he has and select proper downgrades or upgrades.
|
| It will even mem the spells it thinks are reasonable to have memmed from the ones it found.
| unless you set memspellsaswell to 0
| *********************************************************************************************************************

#turbo 120

Sub Main(string inifile)

	/declare memspellsaswell int outer 1

	/declare memcount int outer 1
	/declare spellsarray[200] int outer
	/declare spellsectionarray[200] string outer
	/declare duplicatesarray[200] int outer
	/declare duplicount int outer 1
	/declare iniwrite int outer 1
	/declare newini string outer
	/declare NewSpell string outer 0

	/varset newini kissassist_${EverQuest.Server}_${Me.Name}.ini
	/if (${inifile.Lower.Equal[${newini.Lower}]}) {
		/echo ${inifile.Lower} has the same name as the new ini: ${newini.Lower} no new file will be created.
		/varset iniwrite 0
	} else {
		/call MakeIni "${inifile}"
		/echo
		/echo ------------------------------------ - CHECKING NEW INI------------------------------------
		/echo
	}
	/echo now reading from ${inifile}

	/if (${infile.Equal[null]}) {
		/echo [ERROR] You need to specify a inifile
		/echo try /mac kissini kissassist_youroldtoon.ini or kissassist_<server>_youroldtoon.ini
		/return
	}
	/call ScanIni "${inifile}"
	/if (${memspellsaswell}) {
		/call cleanspellarray
		/call memspell
	}
	/echo
	/if (${Me.Class.CanCast}) {
		/echo ALL FINISHED YOU SHOULD OPEN ${newini} now and make sure the key Miscgem in the [General] section is correct. (its set to ${Ini["${newini}","General","MiscGem"]}) now.
	} else {
		/echo ALL FINISHED YOU SHOULD OPEN ${newini} now and make sure everything looks fine.
	}
/return

Sub cleanspellarray
	/declare i int local
	/if (${memcount}>=1) {
		/for i 1 to ${memcount}
			/call CheckForDuplicates "${spellsarray[${i}]}"
		/next i
	}
/return

Sub CheckForDuplicates(int spellid)
	/declare i int local
	/for i 1 to ${memcount}
		/if (${duplicatesarray[${i}]}==${spellid}) {
			/return
		}
	/next i
	/varset duplicatesarray[${duplicount}] ${spellid}
	/varcalc duplicount ${duplicount} + 1
/return

Sub memspell
	/declare i int local
	/declare localspell int local
	/declare gemcount int local 1
	/declare oktoadd int local 0
	
	/if (${duplicount}>=1) {
		/for i 1 to ${duplicount}
			/varset localspell ${duplicatesarray[${i}]}
			/if (${localspell}) {
				/varset oktoadd 0
				/if (${Spell[${localspell}].Category.NotEqual[Pet]} && ${Spell[${localspell}].Beneficial} && ${Spell[${localspell}].Duration.TotalMinutes}<25) {
					/varset oktoadd 1
				} else /if (${Spell[${localspell}].Category.NotEqual[Pet]} && ${Spell[${localspell}].SpellType.Equal[Detrimental]}) {
					/varset oktoadd 1
				}	
				/if (${oktoadd} && ${gemcount}<=${Me.NumGems}) {
					/if (!${Me.Gem[${localspell}]} || ${Me.Gem[${gemcount}].ID}!=${Spell[${localspell}].ID}) {
						/if (${Me.Gem[${gemcount}].ID}!=${Spell[${localspell}].ID}) {
							/echo Memming ${Spell[${localspell}].Name} in gem ${gemcount}
							/MemSpell ${gemcount} "${Spell[${localspell}].Name}"
							/if (${Bool[${Me.Gem[${gemcount}]}]}==FALSE) {
								|/echo delaying 5s cause gem${gemcount} is NULL
								/delay 5s ${Bool[${Me.Gem[${gemcount}]}]}==TRUE
							} else {
								/if (${Me.Gem[${gemcount}].ID}!=${Spell[${localspell}].ID}) {
									|/echo delaying 5s cause gem${gemcount} is not NULL
									/delay 5s ${Bool[${Me.Gem[${gemcount}]}]}==FALSE
								}
							}
							|/echo wating for ${Me.Gem[${gemcount}].ID} to be equal to ${Spell[${localspell}].ID}
							/delay 15s ${Me.Gem[${gemcount}].ID}==${Spell[${localspell}].ID}
						} else {
							/echo ${Spell[${localspell}].Name} already memmed in gem ${gemcount}
						}
					} else {
						/echo [GEM] ${Spell[${localspell}].Name} already memmed in gem ${gemcount}
					}
					/varcalc gemcount ${gemcount} + 1
				}
			}
		/next i
	}
/return

Sub MakeIni(string theini)
	/declare i int local
	/declare j int local
	/declare iniKeys string local
	/declare iniSubKeys string local
	/declare iniKey string local
	/declare iniValue string local
	/declare iniSubValue string local
	/declare iniSectionCount int local 0
	/declare iniSectionValueCount int local
	/varset iniKeys ${Ini["${theini}"]}
	
	/echo new ini will be ${newini}
	/if (${iniKeys.NotEqual[null]}) {
		/if (${iniKeys.Find[|]}) {
			/varset iniSectionCount ${iniKeys.Count[|]}
			/varcalc iniSectionCount ${iniSectionCount} - 1
			/if (${iniSectionCount}==-1) {
				/varset iniSectionCount 0
			}
			/echo You ${iniSectionCount} Sections in ${theini}
			/for i 1 to ${iniSectionCount}
				/varset iniKey ${iniKeys.Arg[${i},|]}
				/if (${iniKey.NotEqual[null]}) {
					/varset iniSubKeys ${Ini["${theini}",${iniKey}]}
					/if (${iniSubKeys.NotEqual[no value]}) {
						/if (${iniSubKeys.Find[|]}) {
							/varset iniSectionValueCount ${iniSubKeys.Count[|]}
							/varcalc iniSectionValueCount ${iniSectionValueCount} - 1
							/for j 1 to ${iniSectionValueCount}
								/varset iniValue ${iniSubKeys.Arg[${j},|]}
								/if (${iniValue.NotEqual[null]}) {
									/varset iniSubValue ${Ini["${theini}",${iniKey},${iniValue},"no value"]}
									/if (${iniSubValue.NotEqual[no value]}) {
										/ini "${newini}" "${iniKey}" "${iniValue}" "${iniSubValue}"
									}
								}
							/next j
						}
					}
				}
			/next i
		}
	} else {
		/echo no keys found in ${theini}
	}
	/echo All Sections Copied Successfully from ${theini} to ${newini}.
	/echo [UPDATE] Now I will update ${newini} with new spells/skills/aa appropriate for a level ${Me.Level} ${Me.Class.Name}.
/return

Sub FindEquivalentSpell(string spellname, string cat,string subcat,string descrip,string section)
	/if (${Spell[${spellname}].IsSkill}) {
		/call FindEquivalentSkill "${spellname}" "${descrip}" "${Spell[${spellname}].TargetType}" "${Spell[${spellname}].RecastTimerID}"
		/if (${Macro.Return}==1) {
			/return 2
		}
		/return 0
	} else /if (!${AltAbility[${spellname}]}) {
			| so its not an aa...
		} else {
			/varset NewSpell ${spellname}
			/return 3
		}
	} else /if (!${FindItem[${spellname}]}) {
			| so its not a item...
		} else {
			/varset NewSpell ${spellname}
			/return 4
		}
	}
	/declare i int local 1
	/declare j int local 1
	/declare k int local 1
	/declare sname string local
	/declare SpellFound[300] string local
	/declare HighestSpellFound string local
	/declare HighestLevel int local 0
	/declare SpellFoundCount int local 1
	/declare tempmatch int local 0
	/declare templevel int local 0
	/declare spelllevelok int local 0
	/declare tempret int local 1
	/declare validspell int local 1

	/for i 1 to 800
		/if (${Me.Book[${i}].Category.Equal[${cat}]}) {
			/if (${Me.Book[${i}].Subcategory.Equal[${subcat}]}) {
				/varset spelllevelok 1
				/if (${Me.Level} > ${Me.Book[${i}].Level}) {
					/varcalc templevel ${Me.Level} - ${Me.Book[${i}].Level}
					/if (${templevel} > 30) {
						|/echo [DISREGARDING] ${Me.Book[${i}].Name} (${Me.Book[${i}].Level}) is way to low to me a good match for me, disregarding.
						/varset spelllevelok 0
					}
				}
				/if (${spelllevelok} && ${Me.Book[${i}].TargetType.Equal[${Spell[${spellname}].TargetType}]}==TRUE) {
					/if (${Me.Book[${i}].Attrib[1]}==${Spell[${spellname}].Attrib[1]}) {
						/varset validspell 1
						/for k 1 to ${memcount}
							/if (!${spellsarray[${k}]}) {

							} else {
								/if (${spellsectionarray[${k}].Equal[${section}]} && ${spellsarray[${k}]}==${Me.Book[${i}].ID}) {
									|/echo [INFO] ${Me.Book[${i}].Name} is not a valid spell we already added it 
									/varset validspell 0
								}
							}

						/next k
						/if (${validspell}==1) {
							/varset SpellFound[${SpellFoundCount}] ${Me.Book[${i}].Name}
							/varcalc SpellFoundCount ${SpellFoundCount} + 1
						}
					}
				}
			}
		}
	/next i
	/varcalc SpellFoundCount ${SpellFoundCount} - 1
	/for j 1 to ${SpellFoundCount}
		/varset sname ${SpellFound[${j}]}
		|/call CompareDescriptions "${spellname}" "${sname}"
		|/varset tempret ${Macro.Return}
		|/if (${tempret}>=${tempmatch}) {
			|/varset tempmatch ${tempret}
			/if (${HighestLevel}<${Spell[${sname}].Level}) {
				/varset HighestSpellFound ${sname}
				/varset HighestLevel ${Spell[${sname}].Level}
			}
		|}
	/next j
	/if (${HighestLevel}>=1) {
		/varset NewSpell ${HighestSpellFound}
		/return 1
	}
/return 0

Sub CompareDescriptions(string spellorg,string spellnew)
	|/echo we are going to compare ${spellorg} to ${spellnew}
	/declare k int local 1
	/declare l int local 1
	/declare OrgSplits[100] string local
	/declare NewSplits[100] string local
	/declare OrgSplitCount int local
	/declare NewSplitCount int local
	/declare MatchCount int local 0
	/declare newcheckword string local
	/declare orgcheckword string local

	/varset OrgSplitCount ${Spell[${spellorg}].Description.Count[ ]}
	/varset NewSplitCount ${Spell[${spellnew}].Description.Count[ ]}
	
	/for k 1 to ${OrgSplitCount}
		/varset OrgSplits[${k}] ${Spell[${spellorg}].Description.Arg[${k}, ]}
		|/echo ${OrgSplits[${k}]}
	/next k

	/for k 1 to ${NewSplitCount}
		/varset NewSplits[${k}] ${Spell[${spellnew}].Description.Arg[${k}, ]}
	/next k

	/for k 1 to ${OrgSplitCount}
		/varset orgcheckword ${OrgSplits[${k}]}
		/for l 1 to ${NewSplitCount}
			/varset newcheckword ${NewSplits[${l}]}
			/if (${orgcheckword.Equal[${newcheckword}]}) {
				/varcalc MatchCount ${MatchCount} + 1
			}
		/next l
	/next k
/return ${MatchCount}

Sub FindEquivalentSkill(string skillname,string sdescrip,string ttype,int thetimer)
	/declare descsplithash int local 0
	/declare thedescription string local ${sdescrip}
	/declare mydescription string local
	/declare i int local 1
	/declare j int local 1
	/declare sname string local
	/declare desclen int local 0
	/declare descparta string local
	/declare descpartb string local
	/declare SpellFound[300] string local
	/declare HighestSpellFound string local
	/declare HighestLevel int local 0
	/declare SpellFoundCount int local 1

	/varset descsplithash ${thedescription.Find[#]}
	/if (${descsplithash}!=NULL) {
		/varcalc descsplithash ${descsplithasha} - 1
		/varset thedescription ${sdescrip.Left[${descsplithash}]}
	} else {
		/varset thedescription ${sdescrip}
	}
	/for i 1 to 300
		/if (${Me.CombatAbility[${i}].RecastTimerID}==${thetimer}) {
			/if (${Me.CombatAbility[${i}].TargetType.Equal[${ttype}]}) {
				/varset SpellFound[${SpellFoundCount}] ${Me.CombatAbility[${i}].Name}
				/varcalc SpellFoundCount ${SpellFoundCount} + 1
			}
		}
	/next i
	/varcalc SpellFoundCount ${SpellFoundCount} - 1
	/for j 1 to ${SpellFoundCount}
		/varset sname ${SpellFound[${j}]}
		/varset descsplithash 0
		/varset descsplithash ${Spell[${sname}].Description.Find[#]}
		/if (${descsplithash}!=NULL) {
			/varcalc descsplithash ${descsplithash} - 1
			/varset mydescription ${Spell[${sname}].Description.Left[${descsplithash}]}
		} else {
			/varset mydescription ${Spell[${sname}].Description}
		}
		/varset desclen ${mydescription.Length}
		/if (${desclen}>15) {
			/varset desclen 15
		} else {
			/echo [WARNING] ${mydescription} length is really short (${desclen}) im gonna have to compare all of it...
		}
		/varset descparta ${thedescription.Left[${desclen}]}
		/varset descpartb ${mydescription.Left[${desclen}]}
		/if (${descparta.Find[${descpartb}]}==1) {
			/if (${HighestLevel}<${Spell[${sname}].Level}) {
				/varset HighestSpellFound ${sname}
				/varset HighestLevel ${Spell[${sname}].Level}
			}
		}
	/next j
	/if (${HighestLevel}>=1) {
		/varset NewSpell ${HighestSpellFound}
		/return 1
	}
/return 0

Sub ScanIni(string myinifile)
	/declare i int local 1
	/declare j int local 1 
	/declare Section1 string local Buffs
	/declare Section2 string local DPS
	/declare Section3 string local Burn
	/declare Section4 string local Heals
	/declare Section5 string local AE
	/declare Section6 string local Cures
	/declare Section7 string local Pet
	/declare Section8 string local PetBuffs
	/declare Section9 string local GoM
	/declare CountEnrties int local 0
	/declare CountErrors int local 0
	/declare iniKey string local
	/declare therest string local
	/declare realiniKey string local
	/declare realiniValue string local
	/declare Category string local
	/declare Subcategory string local
	/declare Description string local
	/declare iniSectionCount int local
	/declare iniSubKeys string local
	/declare realSection string local
	/declare bdisplay int local
	/declare grade string local

	/if (${iniwrite}) {
		/ini "${newini}" "General" "CharInfo" "${Me.Class.Name}|${Me.Level}"
	}
	/for j 1 to 9
		/varset realSection ${Section${j}}
		/if (${Section${j}.Equal[PetBuffs]}) {
			/varset realSection Pet
		}
		/echo
		/echo ---------------->> Scanning ${Section${j}} <<----------------
		/echo
		/varset CountEnrties 0
		/varset CountErrors 0
		/varset iniSubKeys ${Ini["${myinifile}","${Section${j}}"]}
		/if (${Section${j}.Equal[PetBuffs]}) {
			/varset iniSubKeys ${Ini["${myinifile}","Pet"]}
		}
		/varset iniSectionCount ${iniSubKeys.Count[|]}
		/varcalc iniSectionCount ${iniSectionCount} - 1
		/if (${iniSectionCount}==-1) {
			/varset iniSectionCount 0
		}
		/echo You have ${iniSectionCount} Keys in the ${Section${j}} section.
		/For i 1 to ${iniSectionCount}
			/varset iniKey ${Ini["${myinifile}","${Section${j}}","${Section${j}}${i}","no value"]}
			/varset realiniValue ${Section${j}}${i}
			/if (${Section${j}.Equal[Pet]} && ${i}==1) {
				/varset iniKey ${Ini["${myinifile}",${Section${j}},PetSpell,"no value"]}
				/varset realiniValue PetSpell
			}
			/if (${Section${j}.Equal[Pet]} && ${i}==2) {
				/varset iniKey ${Ini["${myinifile}",${Section${j}},PetShrinkSpell,"no value"]}
				/varset realiniValue PetShrinkSpell
			}
			/if (${Section${j}.Equal[PetBuffs]}) {
				/varset iniKey ${Ini["${myinifile}",Pet,Petbuffs${i},"no value"]}
				/varset realiniValue Petbuffs${i}
			}
			/if (${Section${j}.Equal[GoM]}) {
				/varset iniKey ${Ini["${myinifile}",GoM,GomSpell${i},"no value"]}
				/varset realiniValue GomSpell${i}
			}
			/if (${iniKey.NotEqual[NULL]} && ${iniKey.NotEqual[no value]}) {
				/varset therest NULL
				/if (${iniKey.Find[|]}) {
					/varset realiniKey ${iniKey}
					/varset iniKey ${iniKey.Arg[1,|]}
					/varset therest ${realiniKey.Mid[${realiniKey.Find[|]},1000]}
				}
				|/if (!${Me.Book[${iniKey}]} && !${Me.CombatAbility[${iniKey}]} && !${Me.AltAbility[${iniKey}]} && !${FindItem[=${iniKey}].ID} && ${iniKey.NotEqual[banestrike]}) {
				/if (${Spell[${iniKey}].ID}) {
					/varset Category ${Spell[${iniKey}].Category}
					/varset Subcategory ${Spell[${iniKey}].Subcategory}
					/varset Description ${Spell[${iniKey}].Description}
					/varset NewSpell ""
					/call FindEquivalentSpell "${iniKey}" "${Category}" "${Subcategory}" "${Description}" "${realSection}"
					/if (${Macro.Return}==1) {
						/if (${Spell[${iniKey}].Level}<${Spell[${NewSpell}].Level}) {
							/varset grade Upgraded
						}
						/if (${Spell[${iniKey}].Level}>${Spell[${NewSpell}].Level}) {
							/varset grade Downgraded
						}
						/if (${Spell[${iniKey}].Level}==${Spell[${NewSpell}].Level}) {
							/varset grade Same
							/if (${Spell[${iniKey}].Rank}<${Spell[${NewSpell}].Rank}) {
								/varset grade Upgraded
							} else /if (${Spell[${iniKey}].Rank}>${Spell[${NewSpell}].Rank}) {
								/varset grade Downgraded
							} else {
								/echo [SPELL] There was no upgrade found for ${iniKey} but you do have it, so we will use it.
							}
						}
						/if (${Spell[${iniKey}].ID}!=${Spell[${NewSpell}].ID}) {
							/if (!${Me.Book[${iniKey}]}) {
								/if (!${Me.Book[${Spell[${iniKey}].RankName}]}) /echo [SPELL] You don't have a level ${Spell[${iniKey}].Level} ${iniKey}
								/if (${Me.Level}<${Spell[${iniKey}].Level}) {
									/echo [SPELL] I suggest you use the level ${Spell[${NewSpell}].Level} ${NewSpell} instead, its found in the spellmenu under ${Category}->${Subcategory}.
								} else {
									/if (!${Me.Book[${Spell[${iniKey}].RankName}]}) {
										/echo [SPELL] You are level ${Me.Level} and ${iniKey} is a level ${Spell[${iniKey}].Level} spell, I suggest you aquire it.
									} else {
										/echo [SPELL] We allready added ${Spell[${iniKey}].RankName}
									}
									/echo [SPELL] the closest downgrade is ${NewSpell}
								}
							} else {
								/echo [SPELL] You do have a level ${Spell[${iniKey}].Level} spell ${iniKey}
								/echo [SPELL] I suggest you use the ${grade} level ${Spell[${NewSpell}].Level} ${NewSpell} instead, its found in the spellmenu under ${Category}->${Subcategory}.
							}
						}							
						/varset spellsarray[${memcount}] ${Spell[${NewSpell}].ID}
						/varset spellsectionarray[${memcount}] ${realSection}
						/varcalc memcount ${memcount} + 1
						/if (${iniwrite}) {
							/if (${therest.NotEqual[NULL]}) {
								/varset NewSpell ${NewSpell}${therest}
								/if (${therest.Find[dual]}) {
									/echo [WARNING] Dual detected in ${NewSpell} it should be manually changed.
								}
								/if (${therest.Find[summon]}) {
									/echo [WARNING] Summon detected in ${NewSpell} it should be manually changed.
								}
							}
							/echo [INIUPDATE SPELL] Writing ${grade} Spell to [${realSection}] ${realiniValue}=${NewSpell} to ${newini}
							/ini "${newini}" "${realSection}" "${realiniValue}" "${NewSpell}"
						}
					} else /if (${Macro.Return}==2) {
						/if (${Spell[${iniKey}].Level}<${Spell[${NewSpell}].Level}) {
							/varset grade Upgraded
						}
						/if (${Spell[${iniKey}].Level}>${Spell[${NewSpell}].Level}) {
							/varset grade Downgraded
						}
						/if (${Spell[${iniKey}].Level}==${Spell[${NewSpell}].Level}) {
							/varset grade Same
							/if (${Spell[${iniKey}].Rank}<${Spell[${NewSpell}].Rank}) {
								/varset grade Upgraded
							} else /if (${Spell[${iniKey}].Rank}>${Spell[${NewSpell}].Rank}) {
								/varset grade Downgraded
							} else {
								/echo [SKILL] There was no upgrade found for ${iniKey} but since you do have it, we will use it.
							}
						}
						/if (${Spell[${iniKey}].ID}!=${Spell[${NewSpell}].ID}) {
							/if (!${Me.CombatAbility[${iniKey}]}) {
								/echo [SKILL] You don't have the level ${Spell[${iniKey}].Level} skill ${iniKey}
								/echo [SKILL] I suggest you use the level ${Spell[${NewSpell}].Level} skill ${NewSpell} instead.
							} else {
								/echo [SKILL] You do have the level ${Spell[${iniKey}].Level} skill ${iniKey}
								/echo [SKILL] I suggest you use the ${grade} level ${Spell[${NewSpell}].Level} skill ${NewSpell} instead.
							}
						}
						/if (${iniwrite}) {
							/if (${therest.NotEqual[NULL]}) {
								/varset NewSpell ${NewSpell}${therest}
								/if (${therest.Find[dual]}) {
									/echo [WARNING] Dual detected in ${NewSpell} it should be manually changed.
								}
								/if (${therest.Find[summon]}) {
									/echo [WARNING] Summon detected in ${NewSpell} it should be manually changed.
								}
							}
							/echo [INIUPDATE SKILL] Writing the ${grade} Skill to [${realSection}] ${realiniValue}=${NewSpell} to ${newini}
							/ini "${newini}" "${realSection}" "${realiniValue}" "${NewSpell}"
						}
					} else /if (${Macro.Return}==3) {
						/echo [AA] You actually have ${iniKey} its a Alt Ability
						/if (${iniwrite}) {
							/if (${therest.NotEqual[NULL]}) {
								/varset NewSpell ${NewSpell}${therest}
								/if (${therest.Find[dual]}) {
									/echo [WARNING] Dual detected in ${NewSpell} it should be manually changed.
								}
							}
							/echo [INIUPDATE AA] Writing the AA to [${realSection}] ${realiniValue}=${NewSpell} to ${newini}
							/ini "${newini}" "${realSection}" "${realiniValue}" "${NewSpell}"
						}
					} else /if (${Macro.Return}==4) {
						/echo [ITEM] You actually have a ${iniKey}
						/if (${iniwrite}) {
							/if (${therest.NotEqual[NULL]}) {
								/varset NewSpell ${NewSpell}${therest}
								/if (${therest.Find[dual]}) {
									/echo [WARNING] Dual detected in ${NewSpell} it should be manually changed.
								}
							}
							/echo [INIUPDATE ITEM] Writing the item to [${realSection}] ${realiniValue}=${NewSpell} to ${newini}
							/ini "${newini}" "${realSection}" "${realiniValue}" "${NewSpell}"
						}
					} else {
						/echo ...ERROR: ${realSection}${i}=${iniKey} unable to find as a Spell, AA, Item or Combat Ability
						/varcalc CountErrors ${CountErrors}+1
					}
				} else {
					/if (${FindItem[${iniKey}].ID}) {
						/echo You actually have a ${iniKey} its in ItemSlots (${FindItem[${iniKey}].ItemSlot},${FindItem[${iniKey}].ItemSlot2})
					} else {
						/if (${iniKey.Find[Summoned:]}) {
							/echo couldnt find a ${iniKey} but dont worry about it you can get one later.
							/if (${iniwrite}) {
								/varset NewSpell ${iniKey}
								/if (${therest.NotEqual[NULL]}) {
									/varset NewSpell ${NewSpell}${therest}
								}
								/echo [INIUPDATE: SUMMONED ITEM] Writing [${realSection}] ${realiniValue}=${NewSpell} to ${newini}
								/ini "${newini}" "${realSection}" "${realiniValue}" "${NewSpell}"
							}
						} else {
							/echo NO! YOU HAVE AN ERROR IN YOUR ini file there is no spell named ${iniKey} (it might be an item you can aquire)
						}
					}
				}
				/varcalc CountEnrties ${CountEnrties}+1
			} else {
				/if (${iniKey.Equal[NULL]}) {
					/if (${iniwrite}) {
						/ini "${newini}" "${realSection}" "${realiniValue}" "NULL"
					}
				}
			}
			:SkipInientry
			/if (!${CountEnrties} && ${i}==${iniSectionCount}) {
				/echo -- Nothing defined in this section
			}
			/if (!${CountErrors} && ${CountEnrties} && ${i}==${iniSectionCount}) {
				|/echo -- No Spelling Errors or Missing Items Detected
			}
		/next i
	/next j
/return